# -*- coding: utf-8 -*-
"""Data_creation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fb053sNnO39NOgb4zdvD4JKqG81cxmTk
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture --no-display
# !pip install pathway
# !pip install pathway[xpack-llm]
# !pip install openai
# !pip install pathway[xpack-llm-local]

import datetime
import numpy as np
import pandas as pd
import bokeh.plotting
import panel
import pathway as pw
from pathway.xpacks.llm import embedders

class RealEstateSchema(pw.Schema):
    zip: str
    type: str
    primary_city: str
    acceptable_cities: str
    unacceptable_cities: str
    state: str
    county: str
    timezone: str
    area_codes: str
    country: str

# Reading the real estate CSV data
real_estate_data = pw.io.csv.read(
    'Real_estate_database.csv',
    schema=RealEstateSchema,
    mode='static'
)

pw.run()

# df = pd.read_csv("Real_estate_database.csv")

# columns_to_clean = ['acceptable_cities', 'unacceptable_cities', 'primary_city', 'type', 'zip', 'state', 'county', 'timezone', 'country']
# for column in columns_to_clean:
#     df[column] = df[column].replace('none', '').fillna('')

# # Create the new 'combined' column
# df['combined'] = df['zip'].astype(str) + "," + \
#                  df['type'] + "," + \
#                  df['primary_city'] + "," + \
#                  df['acceptable_cities'] + "," + \
#                  df['unacceptable_cities'] + "," + \
#                  df['state'] + "," + \
#                  df['county'] + "," + \
#                  df['timezone'] + "," + \
#                  df['country']

concatenated_text = real_estate_data.select(
    combined_text=(
        pw.this.zip + " " +
        pw.this.type + " " +
        pw.this.primary_city + " " +
        pw.this.acceptable_cities + " " +
        pw.this.unacceptable_cities + " " +
        pw.this.state + " " +
        pw.this.county + " " +
        pw.this.timezone + " " +
        pw.this.area_codes + " " +
        pw.this.country + "." + " "
    )
)

pw.io.csv.write(concatenated_text, "output_stream.csv")
# documents = [Document(page_content=str(row[0])) for row in concatenated_text.to_dicts()]
# pw.run()